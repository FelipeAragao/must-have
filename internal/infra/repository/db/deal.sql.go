// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: deal.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createDeal = `-- name: CreateDeal :exec

INSERT INTO deal (id, user_id, type, value, description, trade_for, location_lat, location_lng,
                  location_address, location_city, location_state, location_zip_code, urgency_type,
                  urgency_limit_date, photos, created_at, updated_at)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateDealParams struct {
	ID               string
	UserID           string
	Type             sql.NullInt32
	Value            float64
	Description      sql.NullString
	TradeFor         sql.NullString
	LocationLat      sql.NullFloat64
	LocationLng      sql.NullFloat64
	LocationAddress  string
	LocationCity     string
	LocationState    string
	LocationZipCode  int64
	UrgencyType      int32
	UrgencyLimitDate time.Time
	Photos           sql.NullString
	CreatedAt        time.Time
	UpdatedAt        time.Time
}

func (q *Queries) CreateDeal(ctx context.Context, arg CreateDealParams) error {
	_, err := q.db.ExecContext(ctx, createDeal,
		arg.ID,
		arg.UserID,
		arg.Type,
		arg.Value,
		arg.Description,
		arg.TradeFor,
		arg.LocationLat,
		arg.LocationLng,
		arg.LocationAddress,
		arg.LocationCity,
		arg.LocationState,
		arg.LocationZipCode,
		arg.UrgencyType,
		arg.UrgencyLimitDate,
		arg.Photos,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const findByIDDeal = `-- name: FindByIDDeal :one
SELECT id, user_id, type, value, description, trade_for, location_lat, location_lng, location_address, location_city, location_state, location_zip_code, urgency_type, urgency_limit_date, photos, created_at, updated_at
FROM deal
WHERE id = ?
`

func (q *Queries) FindByIDDeal(ctx context.Context, id string) (Deal, error) {
	row := q.db.QueryRowContext(ctx, findByIDDeal, id)
	var i Deal
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Type,
		&i.Value,
		&i.Description,
		&i.TradeFor,
		&i.LocationLat,
		&i.LocationLng,
		&i.LocationAddress,
		&i.LocationCity,
		&i.LocationState,
		&i.LocationZipCode,
		&i.UrgencyType,
		&i.UrgencyLimitDate,
		&i.Photos,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateDeal = `-- name: UpdateDeal :exec
update deal
set user_id            = ?,
    type               = ?,
    value              = ?,
    description        = ?,
    trade_for          = ?,
    location_lat       = ?,
    location_lng       = ?,
    location_address   = ?,
    location_city      = ?,
    location_state     = ?,
    location_zip_code  = ?,
    urgency_type       = ?,
    urgency_limit_date = ?,
    photos             = ?,
    updated_at         = ?
where id = ?
`

type UpdateDealParams struct {
	UserID           string
	Type             sql.NullInt32
	Value            float64
	Description      sql.NullString
	TradeFor         sql.NullString
	LocationLat      sql.NullFloat64
	LocationLng      sql.NullFloat64
	LocationAddress  string
	LocationCity     string
	LocationState    string
	LocationZipCode  int64
	UrgencyType      int32
	UrgencyLimitDate time.Time
	Photos           sql.NullString
	UpdatedAt        time.Time
	ID               string
}

func (q *Queries) UpdateDeal(ctx context.Context, arg UpdateDealParams) error {
	_, err := q.db.ExecContext(ctx, updateDeal,
		arg.UserID,
		arg.Type,
		arg.Value,
		arg.Description,
		arg.TradeFor,
		arg.LocationLat,
		arg.LocationLng,
		arg.LocationAddress,
		arg.LocationCity,
		arg.LocationState,
		arg.LocationZipCode,
		arg.UrgencyType,
		arg.UrgencyLimitDate,
		arg.Photos,
		arg.UpdatedAt,
		arg.ID,
	)
	return err
}
