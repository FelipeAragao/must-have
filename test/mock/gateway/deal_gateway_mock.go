// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	entity "github.com/FelipeAragao/must-have/internal/domain/entity"

	mock "github.com/stretchr/testify/mock"
)

// DealGateway is an autogenerated mock type for the DealGateway type
type DealGateway struct {
	mock.Mock
}

// Create provides a mock function with given fields: user
func (_m *DealGateway) Create(user *entity.Deal) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Deal) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByID provides a mock function with given fields: id
func (_m *DealGateway) FindByID(id string) (*entity.Deal, error) {
	ret := _m.Called(id)

	var r0 *entity.Deal
	if rf, ok := ret.Get(0).(func(string) *entity.Deal); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Deal)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByUser provides a mock function with given fields: user_id
func (_m *DealGateway) FindByUser(user_id string) (*entity.Deal, error) {
	ret := _m.Called(user_id)

	var r0 *entity.Deal
	if rf, ok := ret.Get(0).(func(string) *entity.Deal); ok {
		r0 = rf(user_id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Deal)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(user_id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: user
func (_m *DealGateway) Update(user *entity.Deal) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Deal) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewDealGateway interface {
	mock.TestingT
	Cleanup(func())
}

// NewDealGateway creates a new instance of DealGateway. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDealGateway(t mockConstructorTestingTNewDealGateway) *DealGateway {
	mock := &DealGateway{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
